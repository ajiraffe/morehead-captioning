package moreheadcaptioning.uncglass.com.cgemoreheadcaptioning;

import com.firebase.client.Firebase;
import com.google.android.glass.media.Sounds;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import android.app.Activity;
import android.content.Context;
import android.media.AudioManager;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.os.Handler;
import java.util.Timer;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity {

    /** {@link CardScrollView} to use as the main content view. */
    private CardScrollView mCardScroller;

    /** "Hello World!" {@link View} generated by {@link #buildView()}. */
    private View mView;
    private TextRenderer tr;
    private CardBuilder card;

    private Handler mHandler = new Handler();
    private Firebase firebaseRef;

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        //Set up Firebase
        Firebase.setAndroidContext( this );
        firebaseRef = new Firebase("https://morehead-captioning.firebaseio.com/");

        //mView = buildView();
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

        card = new CardBuilder(this, CardBuilder.Layout.TEXT);

        card.setText(R.string.hello_world);

        Queue<Display> queue = new LinkedQueue<Display>();
        tr = new TextRenderer(card, queue);

//        mCardScroller = new CardScrollView(this);
//        mCardScroller.setAdapter(new CardScrollAdapter() {
//            @Override
//            public int getCount() {
//                return 1;
//            }
//
//            @Override
//            public Object getItem(int position) {
//                return mView;
//            }
//
//            @Override
//            public View getView(int position, View convertView, ViewGroup parent) {
//                return mView;
//            }
//
//            @Override
//            public int getPosition(Object item) {
//                if (mView.equals(item)) {
//                    return 0;
//                }
//                return AdapterView.INVALID_POSITION;
//            }
//        });
//        // Handle the TAP event.
//        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
//            @Override
//            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
//                // Plays disallowed sound to indicate that TAP actions are not supported.
//                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
//                am.playSoundEffect(Sounds.DISALLOWED);
//            }
//        });




        tr.populateQueue();

        Thread textThread = new Thread( tr );
        textThread.start();

        final Context mContext = this;
        Runnable updateUI = new Runnable(){
            public void run(){
                ((Activity) mContext).setContentView(card.getView());
                mHandler.postDelayed(this, 100);
            }
        };

        mHandler.postDelayed(updateUI, 100);

        //setContentView(mView);
    }

    @Override
    protected void onResume() {
        super.onResume();
        //mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        //mCardScroller.deactivate();
        super.onPause();
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */
    private View buildView() {
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

        CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT);

        card.setText(R.string.hello_world);

        Queue<Display> queue = new LinkedQueue<Display>();
        tr = new TextRenderer(card, queue);

        return card.getView();
    }

}
